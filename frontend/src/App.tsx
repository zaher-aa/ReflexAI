import React, { useState, useEffect } from "react";
import ReactMarkdown from 'react-markdown';
import FileUpload from "./components/FileUpload";
import KeynessChart from "./components/KeynessChart";
import SemanticClusters from "./components/SemanticClusters";
import SentimentDisplay from "./components/SentimentDisplay";
import { uploadFile, getResults, downloadResults } from "./services/api";
import { AnalysisResult } from "./types";

function App() {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [results, setResults] = useState<AnalysisResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleFileUpload = async (file: File) => {
    setIsAnalyzing(true);
    setError(null);
    setUploadProgress(0);

    try {
      // Simulate progress for better UX
      const progressInterval = setInterval(() => {
        setUploadProgress((prev) => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return prev + 10;
        });
      }, 200);

      // Upload file
      const uploadResponse = await uploadFile(file);

      if (uploadResponse.success && uploadResponse.analysisId) {
        setUploadProgress(95);

        // Get the analysis results
        const analysisResults = await getResults(uploadResponse.analysisId);
        setUploadProgress(100);

        // Wait a moment to show completion
        setTimeout(() => {
          setResults(analysisResults);
          setIsAnalyzing(false);
          setUploadProgress(0);
        }, 500);
      } else {
        throw new Error(uploadResponse.message || "Upload failed");
      }
    } catch (err: any) {
      setError(err.message || "Failed to analyze text. Please try again.");
      console.error(err);
      setIsAnalyzing(false);
      setUploadProgress(0);
    }
  };

  const handleDownload = async () => {
    if (!results) return;

    try {
      const blob = await downloadResults(results.id);
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `analysis-${results.id}.json`;
      a.click();
      window.URL.revokeObjectURL(url);
    } catch (err) {
      console.error("Download failed:", err);
      setError("Failed to download results.");
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <h1 className="text-3xl font-bold text-gray-900">
            Text Analysis Tool
          </h1>
          <p className="mt-2 text-gray-600">
            Discover insights in your creative writing with AI-powered analysis
          </p>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 py-8">
        {!results ? (
          <div className="max-w-2xl mx-auto">
            <FileUpload
              onFileSelect={handleFileUpload}
              isUploading={isAnalyzing}
              uploadProgress={uploadProgress}
            />
            {error && (
              <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded text-red-600">
                {error}
              </div>
            )}
          </div>
        ) : (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-semibold">Analysis Results</h2>
              <div className="space-x-4">
                <button
                  onClick={handleDownload}
                  className="px-4 py-2 bg-primary text-white rounded hover:bg-indigo-600"
                >
                  Download Results
                </button>
                <button
                  onClick={() => setResults(null)}
                  className="px-4 py-2 border border-gray-300 rounded hover:bg-gray-50"
                >
                  New Analysis
                </button>
              </div>
            </div>

            {/* AI Insights Section (if available) */}
            {results.aiInsights && (
              <div className="bg-white p-6 rounded-lg shadow">
                <h3 className="text-lg font-semibold mb-3">AI Insights</h3>
                <div className="prose prose-sm max-w-none text-gray-700 whitespace-pre-wrap">
                  <ReactMarkdown>
                    {results.aiInsights.ai_insights}
                  </ReactMarkdown>
                </div>
                <p className="text-xs text-gray-500 mt-3">
                  Generated by {results.aiInsights.model}
                </p>
              </div>
            )}

            <KeynessChart data={results.keyness} />
            <SemanticClusters clusters={results.semanticClusters} />
            <SentimentDisplay sentiment={results.sentiment} />
          </div>
        )}
      </main>
    </div>
  );
}

export default App;
